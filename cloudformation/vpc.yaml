AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a simple VPC across two Availability Zones
## TO-DO:
## add outputs for referenceable resources
## add SAML owner tag to resources
## add VPC flowlogs

Parameters:
  pVpcCidrBlock:
    Type: String
    Default: "10.0.0.0/16"
    Description: "CIDR block of this VPC network"

  pPubSub1CidrBlock:
    Type: String
    Default: "10.0.10.0/24"
    Description: "CIDR block for Public Subnet 1"

  pPubSub2CidrBlock:
    Type: String
    Default: "10.0.20.0/24"
    Description: "CIDR block for Public Subnet 2"
    
  pPriSub1CidrBlock:
    Type: String
    Default: "10.0.110.0/24"
    Description: "CIDR block for Private Subnet 1"

  pPriSub2CidrBlock:
    Type: String
    Default: "10.0.120.0/24"
    Description: "CIDR block for Private Subnet 2"
    
  pProSub1CidrBlock:
    Type: String
    Default: "10.0.210.0/24"
    Description: "CIDR block for Protected Subnet 1"

  pProSub2CidrBlock:
    Type: String
    Default: "10.0.220.0/24"
    Description: "CIDR block for Protected Subnet 2"

## organize our parameters a bit so they are more readable
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "VPC Networking"
        Parameters:
          - pVpcCidrBlock
          - pPubSub1CidrBlock
          - pPubSub2CidrBlock
          - pPriSub1CidrBlock
          - pPriSub2CidrBlock
          - pProSub1CidrBlock
          - pProSub2CidrBlock
    ParameterLabels:
      pVpcCidrBlock:
        default: "VPC CIDR Block"
      pPubSub1CidrBlock:
        default: "CIDR Block for Public Subnet 1"
      pPubSub2CidrBlock:
        default: "CIDR Block for Public Subnet 2"
      pPriSub1CidrBlock:
        default: "CIDR Block for Private Subnet 1"
      pPriSub2CidrBlock:
        default: "CIDR Block for Private Subnet 2"
      pProSub1CidrBlock:
        default: "CIDR Block for Protected Subnet 1"
      pProSub2CidrBlock:
        default: "CIDR Block for Protected Subnet 2"

Resources:
  ##########
  ## VPC, Public and Private Subnets
  ##########
 
  rVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  rPubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref pPubSub1CidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public1"

  rPubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref pPubSub2CidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public2"

  rPriSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref pPriSub1CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private1"

  rPriSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref pPriSub2CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private2"

  rProSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref pProSub1CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Protected1"

  rProSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref pProSub2CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Protected2"
      
  ##########
  ## Internet Gateway, and attachment to VPC
  ##########

  rVpcIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InetGateway"

  rVpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rVpcIgw
      VpcId: !Ref rVpc

  ##########
  ## NAT Gateways in each Public Subnet with elastic IP addresses
  ##########
  
  rNatEip1:
    Type: AWS::EC2::EIP
    DependsOn: rVpcIgwAttachment
    Properties:
      Domain: vpc

  rNatEip2:
    Type: AWS::EC2::EIP
    DependsOn: rVpcIgwAttachment
    Properties:
      Domain: vpc

  rNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt rNatEip1.AllocationId
      SubnetId: !Ref rPubSub1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NAT1"

  rNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt rNatEip2.AllocationId
      SubnetId: !Ref rPubSub2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NAT2"

  ##########
  ## Route Tables for the subnets, and association
  ##########
  rPubSub1Rtable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public1"

  rPubSub1RtableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPubSub1Rtable
      SubnetId: !Ref rPubSub1

  rPubSub2Rtable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public2"

  rPubSub2RtableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPubSub2Rtable
      SubnetId: !Ref rPubSub2

  rPriSub1Rtable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private1"

  rPriSub1RtableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPriSub1Rtable
      SubnetId: !Ref rPriSub1

  rPriSub2Rtable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private2"

  rPriSub2RtableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPriSub2Rtable
      SubnetId: !Ref rPriSub2

  rProSub1Rtable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Protected1"

  rProSub1RtableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rProSub1Rtable
      SubnetId: !Ref rProSub1

  rProSub2Rtable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Protected2"

  rProSub2RtableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rProSub2Rtable
      SubnetId: !Ref rProSub2

  ##########
  ## Routes for the Route Tables
  ##########
  rPubSub1IgwRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref rVpcIgw
      RouteTableId: !Ref rPubSub1Rtable

  rPubSub2IgwRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref rVpcIgw
      RouteTableId: !Ref rPubSub2Rtable

  rPriSub1NatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref rNatGateway1
      RouteTableId: !Ref rPriSub1Rtable

  rPriSub2NatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref rNatGateway2
      RouteTableId: !Ref rPriSub2Rtable
  ## protected subnet rt will use implicit local route,
  ## no need to define any other routes because protected

Outputs:
  oVpcId:
    Description: VPC ID
    Value: !Ref rVpc
  oPubSubs:
    Description: Public Subnet IDs
    Value: !Join [',', [!Ref rPubSub1, !Ref rPubSub2]]
  oPriSubs:
    Description: Private Subnet IDs
    Value: !Join [',', [!Ref rPriSub1, !Ref rPriSub2]]
  oProSubs:
    Description: Protected Subnet IDs
    Value: !Join [',', [!Ref rProSub1, !Ref rProSub2]]
  oDefaultSg:
    Description: Default Security Group that allows all traffic from self-referenced SG
    Value: !GetAtt [rVpc, DefaultSecurityGroup]
